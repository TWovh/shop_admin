#!/usr/bin/env python
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–±–æ—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import requests
import time
import json

BASE_URL = "http://localhost:8000/api"

def test_cache_performance():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
    """
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à –ø—Ä–æ–º–∞—Ö)
    print("\n1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (Cache MISS):")
    start_time = time.time()
    response1 = requests.get(f"{BASE_URL}/test/cache/")
    time1 = (time.time() - start_time) * 1000
    
    if response1.status_code == 200:
        data1 = response1.json()
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {data1['response_time_ms']}ms")
        print(f"   üìä –°—Ç–∞—Ç—É—Å –∫—ç—à–∞: {data1['cache']}")
        print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data1['message']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response1.status_code}")
        return
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ)
    print("\n2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (Cache HIT):")
    start_time = time.time()
    response2 = requests.get(f"{BASE_URL}/test/cache/")
    time2 = (time.time() - start_time) * 1000
    
    if response2.status_code == 200:
        data2 = response2.json()
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {data2['response_time_ms']}ms")
        print(f"   üìä –°—Ç–∞—Ç—É—Å –∫—ç—à–∞: {data2['cache']}")
        print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data2['message']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response2.status_code}")
        return
    
    # –¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ)
    print("\n3Ô∏è‚É£ –¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å (Cache HIT):")
    start_time = time.time()
    response3 = requests.get(f"{BASE_URL}/test/cache/")
    time3 = (time.time() - start_time) * 1000
    
    if response3.status_code == 200:
        data3 = response3.json()
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {data3['response_time_ms']}ms")
        print(f"   üìä –°—Ç–∞—Ç—É—Å –∫—ç—à–∞: {data3['cache']}")
        print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data3['message']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response3.status_code}")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"   üêå –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {data1['response_time_ms']}ms (Cache MISS)")
    print(f"   ‚ö° –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: {data2['response_time_ms']}ms (Cache HIT)")
    print(f"   ‚ö° –¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å: {data3['response_time_ms']}ms (Cache HIT)")
    
    improvement = data1['response_time_ms'] / data2['response_time_ms']
    print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: –≤ {improvement:.1f} —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!")


def test_cache_clear():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    """
    print("\nüßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:")
    print("=" * 30)
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à
    response = requests.post(f"{BASE_URL}/test/cache/clear/")
    if response.status_code == 200:
        print("   ‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {response.status_code}")
        return
    
    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    print("\nüîÑ –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:")
    start_time = time.time()
    response = requests.get(f"{BASE_URL}/test/cache/")
    time_taken = (time.time() - start_time) * 1000
    
    if response.status_code == 200:
        data = response.json()
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {data['response_time_ms']}ms")
        print(f"   üìä –°—Ç–∞—Ç—É—Å –∫—ç—à–∞: {data['cache']}")
        print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")


def test_cache_stats():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
    """
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
    print("=" * 20)
    
    response = requests.get(f"{BASE_URL}/test/cache/stats/")
    if response.status_code == 200:
        data = response.json()
        print(f"   üîß Backend: {data['cache_backend']}")
        if 'stats' in data:
            stats = data['stats']
            print(f"   üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {stats.get('used_memory', 'N/A')}")
            print(f"   üë• –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats.get('connected_clients', 0)}")
            print(f"   üìà Hit rate: {stats.get('hit_rate_percent', 0)}%")
            print(f"   ‚úÖ –ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à: {stats.get('keyspace_hits', 0)}")
            print(f"   ‚ùå –ü—Ä–æ–º–∞—Ö–∏ –∫—ç—à–∞: {stats.get('keyspace_misses', 0)}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")


def test_products_cache():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    """
    print("\nüõçÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:")
    print("=" * 40)
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤
    print("\n1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤:")
    start_time = time.time()
    response1 = requests.get(f"{BASE_URL}/products/")
    time1 = (time.time() - start_time) * 1000
    
    if response1.status_code == 200:
        data1 = response1.json()
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {time1:.2f}ms")
        print(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data1)}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response1.status_code}")
        return
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤
    print("\n2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤:")
    start_time = time.time()
    response2 = requests.get(f"{BASE_URL}/products/")
    time2 = (time.time() - start_time) * 1000
    
    if response2.status_code == 200:
        data2 = response2.json()
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {time2:.2f}ms")
        print(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data2)}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response2.status_code}")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if time1 > 0:
        improvement = time1 / time2
        print(f"\nüöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: –≤ {improvement:.1f} —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!")


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
        response = requests.get(f"{BASE_URL}/test/cache/", timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            exit(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        test_cache_performance()
        test_cache_clear()
        test_cache_stats()
        test_products_cache()
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüí° –ß—Ç–æ –º—ã —É–≤–∏–¥–µ–ª–∏:")
        print("   ‚Ä¢ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –º–µ–¥–ª–µ–Ω–Ω—ã–π (Cache MISS)")
        print("   ‚Ä¢ –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –±—ã—Å—Ç—Ä—ã–µ (Cache HIT)")
        print("   ‚Ä¢ –ö—ç—à –º–æ–∂–Ω–æ –æ—á–∏—â–∞—Ç—å")
        print("   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print("   python manage.py runserver")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}") 