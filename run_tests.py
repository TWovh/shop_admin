#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
"""
import os
import sys
import subprocess
import time
from pathlib import Path

def run_command(command, description=""):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print(f"{'='*60}")
    
    start_time = time.time()
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    end_time = time.time()
    
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
    
    if result.stdout:
        print("\nüì§ STDOUT:")
        print(result.stdout)
    
    if result.stderr:
        print("\n‚ùå STDERR:")
        print(result.stderr)
    
    if result.returncode == 0:
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
    
    return result.returncode == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Django –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("manage.py").exists():
        print("‚ùå –§–∞–π–ª manage.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!")
        print("   –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ: venv\\Scripts\\activate")
        return
    
    while True:
        print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤:")
        print("1. üîç –í—Å–µ —Ç–µ—Å—Ç—ã")
        print("2. üèóÔ∏è  –¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π")
        print("3. üîå –¢–µ—Å—Ç—ã API")
        print("4. üíæ –¢–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("5. üîÑ –¢–µ—Å—Ç—ã Celery –∑–∞–¥–∞—á")
        print("6. üí≥ –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π")
        print("7. üì¶ –¢–µ—Å—Ç—ã Nova Poshta")
        print("8. ‚ö° –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("9. üîí –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("10. üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        print("11. üìä –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
        print("12. üêõ –¢–µ—Å—Ç—ã —Å –æ—Ç–ª–∞–¥–∫–æ–π")
        print("13. üöÄ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-13): ").strip()
        
        if choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        elif choice == "1":
            # –í—Å–µ —Ç–µ—Å—Ç—ã
            success = run_command(
                "python manage.py test --settings=shopadmin.test_settings",
                "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"
            )
        
        elif choice == "2":
            # –¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π
            success = run_command(
                "python manage.py test shop.tests.ModelTests --settings=shopadmin.test_settings",
                "–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π"
            )
        
        elif choice == "3":
            # –¢–µ—Å—Ç—ã API
            success = run_command(
                "python manage.py test shop.tests.APITests --settings=shopadmin.test_settings",
                "–¢–µ—Å—Ç—ã API"
            )
        
        elif choice == "4":
            # –¢–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            success = run_command(
                "python manage.py test shop.tests.CacheTests --settings=shopadmin.test_settings",
                "–¢–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
        
        elif choice == "5":
            # –¢–µ—Å—Ç—ã Celery –∑–∞–¥–∞—á
            success = run_command(
                "python manage.py test shop.tests.CeleryTaskTests --settings=shopadmin.test_settings",
                "–¢–µ—Å—Ç—ã Celery –∑–∞–¥–∞—á"
            )
        
        elif choice == "6":
            # –¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
            success = run_command(
                "python manage.py test shop.tests.PaymentTests --settings=shopadmin.test_settings",
                "–¢–µ—Å—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"
            )
        
        elif choice == "7":
            # –¢–µ—Å—Ç—ã Nova Poshta
            success = run_command(
                "python manage.py test shop.tests.NovaPoshtaTests --settings=shopadmin.test_settings",
                "–¢–µ—Å—Ç—ã Nova Poshta"
            )
        
        elif choice == "8":
            # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            success = run_command(
                "python manage.py test shop.tests.PerformanceTests --settings=shopadmin.test_settings",
                "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            )
        
        elif choice == "9":
            # –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            success = run_command(
                "python manage.py test shop.tests.SecurityTests --settings=shopadmin.test_settings",
                "–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            )
        
        elif choice == "10":
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            success = run_command(
                "python manage.py test shop.tests.IntegrationTests --settings=shopadmin.test_settings",
                "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
            )
        
        elif choice == "11":
            # –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
            print("\nüìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ coverage...")
            subprocess.run("pip install coverage", shell=True)
            
            success = run_command(
                "coverage run --source='.' manage.py test --settings=shopadmin.test_settings",
                "–¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
            )
            
            if success:
                run_command("coverage report", "–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞")
                run_command("coverage html", "–°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞")
                print("üìÅ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ htmlcov/")
        
        elif choice == "12":
            # –¢–µ—Å—Ç—ã —Å –æ—Ç–ª–∞–¥–∫–æ–π
            success = run_command(
                "python manage.py test --settings=shopadmin.test_settings --verbosity=3",
                "–¢–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"
            )
        
        elif choice == "13":
            # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
            success = run_command(
                "python manage.py test shop.tests.ModelTests shop.tests.APITests --settings=shopadmin.test_settings --parallel",
                "–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)"
            )
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            continue
        
        if success:
            print("\nüéâ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\nüí• –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –≤—ã–π—Ç–∏
        continue_choice = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n): ").strip().lower()
        if continue_choice not in ['y', 'yes', '–¥–∞', '–¥']:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

def run_specific_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("\nüéØ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
    print("–ü—Ä–∏–º–µ—Ä—ã:")
    print("  shop.tests.ModelTests.test_product_creation")
    print("  shop.tests.APITests.test_products_list_api")
    print("  shop.tests.CacheTests.test_cache_miss_and_hit")
    
    test_name = input("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–µ—Å—Ç–∞: ").strip()
    
    if test_name:
        command = f"python manage.py test {test_name} --settings=shopadmin.test_settings"
        run_command(command, f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 